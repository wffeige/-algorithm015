# 遍历搜索
- 访问每一个节点
- 每个节点仅仅访问一次
- 深度搜索
- 广度搜索
- 优先级搜索

## DFS

### DFS遍历顺序-二叉树
![](https://p6-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/2a105642fabb4c4cbaaca6828b794d95~tplv-k3u1fbpfcp-zoom-1.image)

### DFS遍历顺序-图
![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/e1056c0531474becbcc9eca3d1829774~tplv-k3u1fbpfcp-zoom-1.image)

### DFS代码模版-递归写法
```
#Python
visited = set()

def dfs(node, visited):

	# 终止条件
    if node in visited: # terminator
    	# already visited
    	return

    # 当前层的处理逻辑
	visited.add(node)

	# process current node here.
	# ...

    # 下探到下一层
	for next_node in node.children():
		if next_node not in visited:
			dfs(next_node, visited)

```


### DFS代码模版-非递归写法
```
#Python
def DFS(self, tree):

	if tree.root is None:
		return []

	visited, stack = [], [tree.root]

	while stack:
		node = stack.pop()
		visited.add(node)

		process (node)
		nodes = generate_related_nodes(node)
		stack.push(nodes)

	# other processing work
	...
```


## BFS(广度搜索)

### 遍历顺序-二叉树
![](https://p9-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/885bcd7d5a06409fa5c8e5eadf5cb32b~tplv-k3u1fbpfcp-zoom-1.image)

### BFS代码模版-非递归写法
```
# Python
def BFS(graph, start, end):
    visited = set()
	queue = []
	queue.append([start])
	while queue:
		node = queue.pop()
		visited.add(node)
		process(node)

        #  找到关联节点 继续加入队列
		nodes = generate_related_nodes(node)
		queue.push(nodes)
	# other processing work
	...
```

## DFS vs BFS
### 遍历顺序
![](https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/50ed959d15b242db9ad44b95bc330793~tplv-k3u1fbpfcp-zoom-1.image)